// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type URLReq struct {
	RawUrl               string   `protobuf:"bytes,1,opt,name=raw_url,json=rawUrl,proto3" json:"raw_url,omitempty" form:"raw_url" validate:"required,contains=http"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLReq) Reset()         { *m = URLReq{} }
func (m *URLReq) String() string { return proto.CompactTextString(m) }
func (*URLReq) ProtoMessage()    {}
func (*URLReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *URLReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_URLReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *URLReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLReq.Merge(m, src)
}
func (m *URLReq) XXX_Size() int {
	return m.Size()
}
func (m *URLReq) XXX_DiscardUnknown() {
	xxx_messageInfo_URLReq.DiscardUnknown(m)
}

var xxx_messageInfo_URLReq proto.InternalMessageInfo

type URLResp struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLResp) Reset()         { *m = URLResp{} }
func (m *URLResp) String() string { return proto.CompactTextString(m) }
func (*URLResp) ProtoMessage()    {}
func (*URLResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *URLResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_URLResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *URLResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLResp.Merge(m, src)
}
func (m *URLResp) XXX_Size() int {
	return m.Size()
}
func (m *URLResp) XXX_DiscardUnknown() {
	xxx_messageInfo_URLResp.DiscardUnknown(m)
}

var xxx_messageInfo_URLResp proto.InternalMessageInfo

type GetRawURLReq struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty" form:"code" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRawURLReq) Reset()         { *m = GetRawURLReq{} }
func (m *GetRawURLReq) String() string { return proto.CompactTextString(m) }
func (*GetRawURLReq) ProtoMessage()    {}
func (*GetRawURLReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetRawURLReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRawURLReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRawURLReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRawURLReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRawURLReq.Merge(m, src)
}
func (m *GetRawURLReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRawURLReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRawURLReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRawURLReq proto.InternalMessageInfo

type GetRawURLResp struct {
	RawUrl               string   `protobuf:"bytes,1,opt,name=raw_url,json=rawUrl,proto3" json:"raw_url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRawURLResp) Reset()         { *m = GetRawURLResp{} }
func (m *GetRawURLResp) String() string { return proto.CompactTextString(m) }
func (*GetRawURLResp) ProtoMessage()    {}
func (*GetRawURLResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GetRawURLResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRawURLResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRawURLResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRawURLResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRawURLResp.Merge(m, src)
}
func (m *GetRawURLResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRawURLResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRawURLResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRawURLResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*URLReq)(nil), "platform.shorturl.v1.URLReq")
	proto.RegisterType((*URLResp)(nil), "platform.shorturl.v1.URLResp")
	proto.RegisterType((*GetRawURLReq)(nil), "platform.shorturl.v1.GetRawURLReq")
	proto.RegisterType((*GetRawURLResp)(nil), "platform.shorturl.v1.GetRawURLResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3d, 0x4f, 0xe3, 0x30,
	0x18, 0xc7, 0x9b, 0xbb, 0x53, 0x5f, 0x7c, 0x77, 0xd2, 0xc9, 0xba, 0xa1, 0x97, 0xeb, 0x25, 0x95,
	0x7b, 0xd2, 0xdd, 0x00, 0x09, 0xaf, 0x42, 0xaa, 0xc4, 0xd2, 0xa5, 0x4b, 0x59, 0x02, 0x15, 0x12,
	0x0b, 0xb8, 0xad, 0x9b, 0x5a, 0x4a, 0x63, 0xd7, 0x76, 0x5a, 0xb1, 0xf2, 0x15, 0x58, 0xf8, 0x3c,
	0x4c, 0x1d, 0x91, 0xd8, 0x23, 0x28, 0x4c, 0x1d, 0xfb, 0x09, 0x50, 0x9d, 0x14, 0x0a, 0xaa, 0x60,
	0x89, 0xfc, 0xe4, 0xff, 0xd7, 0x4f, 0x3f, 0x3f, 0x06, 0x05, 0xcc, 0xa9, 0xc3, 0x05, 0x53, 0x0c,
	0xfe, 0xe4, 0x01, 0x56, 0x5d, 0x26, 0xfa, 0x8e, 0xec, 0x31, 0xa1, 0x22, 0x11, 0x38, 0xc3, 0x4d,
	0x73, 0xdd, 0xa7, 0xaa, 0x17, 0xb5, 0x9c, 0x36, 0xeb, 0xbb, 0x3e, 0xf3, 0x99, 0xab, 0xcb, 0xad,
	0xa8, 0xab, 0x27, 0x3d, 0xe8, 0x53, 0x02, 0x31, 0x7f, 0xfb, 0x8c, 0xf9, 0x01, 0x79, 0x69, 0x91,
	0x3e, 0x57, 0xe7, 0x69, 0x58, 0x4a, 0x43, 0xcc, 0xa9, 0x8b, 0xc3, 0x90, 0x29, 0xac, 0x28, 0x0b,
	0x65, 0x92, 0xa2, 0x63, 0x90, 0x6d, 0x7a, 0x0d, 0x8f, 0x0c, 0xe0, 0x01, 0xc8, 0x09, 0x3c, 0x3a,
	0x8d, 0x44, 0x50, 0x34, 0xca, 0xc6, 0xff, 0x42, 0x6d, 0x67, 0x16, 0xdb, 0x1b, 0x73, 0xb5, 0x2a,
	0x4a, 0x03, 0x54, 0x1e, 0xe2, 0x80, 0x76, 0xb0, 0x22, 0x55, 0x24, 0xc8, 0x20, 0xa2, 0x82, 0x74,
	0xd6, 0xda, 0x2c, 0x54, 0x98, 0x86, 0x72, 0xbf, 0xa7, 0x14, 0x47, 0x5e, 0x56, 0xe0, 0x51, 0x53,
	0x04, 0xe8, 0x1f, 0xc8, 0x69, 0xb0, 0xe4, 0xb0, 0x04, 0xbe, 0xb4, 0x59, 0x87, 0xa4, 0xd8, 0xfc,
	0x34, 0xb6, 0xf5, 0xec, 0xe9, 0x2f, 0xaa, 0x83, 0x6f, 0x75, 0xa2, 0x3c, 0x3c, 0x4a, 0x3d, 0xf6,
	0x5e, 0xb5, 0x2b, 0xb3, 0xd8, 0xb6, 0x13, 0x09, 0xdd, 0x5e, 0x61, 0x80, 0x52, 0xd0, 0x2e, 0xf8,
	0xbe, 0x04, 0x92, 0x1c, 0xfe, 0x7d, 0x7b, 0xa3, 0xaf, 0xd3, 0xd8, 0x5e, 0xfc, 0x5a, 0x88, 0x6e,
	0x5d, 0x1b, 0x20, 0x7f, 0x38, 0xdf, 0x7d, 0xd3, 0x6b, 0xc0, 0x33, 0x90, 0xd3, 0x67, 0x12, 0xc2,
	0x92, 0xb3, 0xea, 0x69, 0x9c, 0xc4, 0xd2, 0xfc, 0xf3, 0x4e, 0x2a, 0x39, 0x2a, 0x5e, 0xdc, 0x3e,
	0x5e, 0x7e, 0x82, 0xe8, 0x87, 0x5e, 0x7b, 0x24, 0x02, 0x57, 0xa6, 0xd8, 0x23, 0x50, 0x78, 0xb6,
	0x84, 0x68, 0x35, 0x65, 0x79, 0x1f, 0x66, 0xe5, 0xc3, 0x8e, 0xe4, 0xb5, 0x5f, 0xe3, 0x7b, 0x2b,
	0x33, 0x9e, 0x58, 0xc6, 0xcd, 0xc4, 0x32, 0xee, 0x26, 0x96, 0x71, 0xf5, 0x60, 0x65, 0x4e, 0x3e,
	0x63, 0x4e, 0x5b, 0x59, 0xfd, 0xd0, 0xdb, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x58, 0x82, 0x00,
	0x45, 0x75, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShortURLClient is the client API for ShortURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShortURLClient interface {
	Shorten(ctx context.Context, in *URLReq, opts ...grpc.CallOption) (*URLResp, error)
	GetRawURL(ctx context.Context, in *GetRawURLReq, opts ...grpc.CallOption) (*GetRawURLResp, error)
}

type shortURLClient struct {
	cc *grpc.ClientConn
}

func NewShortURLClient(cc *grpc.ClientConn) ShortURLClient {
	return &shortURLClient{cc}
}

func (c *shortURLClient) Shorten(ctx context.Context, in *URLReq, opts ...grpc.CallOption) (*URLResp, error) {
	out := new(URLResp)
	err := c.cc.Invoke(ctx, "/platform.shorturl.v1.ShortURL/Shorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) GetRawURL(ctx context.Context, in *GetRawURLReq, opts ...grpc.CallOption) (*GetRawURLResp, error) {
	out := new(GetRawURLResp)
	err := c.cc.Invoke(ctx, "/platform.shorturl.v1.ShortURL/GetRawURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLServer is the server API for ShortURL service.
type ShortURLServer interface {
	Shorten(context.Context, *URLReq) (*URLResp, error)
	GetRawURL(context.Context, *GetRawURLReq) (*GetRawURLResp, error)
}

// UnimplementedShortURLServer can be embedded to have forward compatible implementations.
type UnimplementedShortURLServer struct {
}

func (*UnimplementedShortURLServer) Shorten(ctx context.Context, req *URLReq) (*URLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (*UnimplementedShortURLServer) GetRawURL(ctx context.Context, req *GetRawURLReq) (*GetRawURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawURL not implemented")
}

func RegisterShortURLServer(s *grpc.Server, srv ShortURLServer) {
	s.RegisterService(&_ShortURL_serviceDesc, srv)
}

func _ShortURL_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.shorturl.v1.ShortURL/Shorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Shorten(ctx, req.(*URLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_GetRawURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).GetRawURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.shorturl.v1.ShortURL/GetRawURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).GetRawURL(ctx, req.(*GetRawURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShortURL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "platform.shorturl.v1.ShortURL",
	HandlerType: (*ShortURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shorten",
			Handler:    _ShortURL_Shorten_Handler,
		},
		{
			MethodName: "GetRawURL",
			Handler:    _ShortURL_GetRawURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *URLReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RawUrl) > 0 {
		i -= len(m.RawUrl)
		copy(dAtA[i:], m.RawUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RawUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *URLResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRawURLReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRawURLReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRawURLReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRawURLResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRawURLResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRawURLResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RawUrl) > 0 {
		i -= len(m.RawUrl)
		copy(dAtA[i:], m.RawUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RawUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *URLReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *URLResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRawURLReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRawURLResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *URLReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRawURLReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRawURLReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRawURLReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRawURLResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRawURLResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRawURLResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
